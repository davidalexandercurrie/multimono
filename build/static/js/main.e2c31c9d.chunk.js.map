{"version":3,"sources":["index.js"],"names":["extend","OrbitControls","tracks","Controls","props","useThree","camera","gl","ref","useRef","useFrame","current","update","target","enableDamping","maxPolarAngle","Math","PI","minPolarAngle","args","domElement","Sound","url","sound","useState","THREE","listener","buffer","useLoader","useEffect","setBuffer","setRefDistance","setLoop","play","setDirectionalCone","add","remove","ReactDOM","render","setPlay","className","onClick","position","fallback","castShadow","map","random","attach","color","enableKeys","autoRotate","document","getElementById"],"mappings":"qPAOAA,YAAO,CAAEC,oBAET,IAAMC,EAAS,CACb,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,iCAGIC,EAAW,SAAAC,GAAU,IAAD,EACDC,cAAfC,EADgB,EAChBA,OAAQC,EADQ,EACRA,GACVC,EAAMC,mBAEZ,OADAC,aAAS,kBAAMF,EAAIG,QAAQC,YACpB,mCAAeJ,IAAKA,EAAKK,OAAQ,CAAC,EAAG,EAAG,GAAIC,eAAa,EAACC,cAAeC,KAAKC,GAAK,EAAGC,cAAeF,KAAKC,GAAK,EAAGE,KAAM,CAACb,EAAQC,EAAGa,eAG7I,SAASC,EAAT,GAAyB,IAARC,EAAO,EAAPA,IACTC,EAAQd,mBACNH,EAAWD,cAAXC,OAFc,EAGHkB,oBAAS,kBAAM,IAAIC,mBAA/BC,EAHe,oBAIhBC,EAASC,YAAUH,cAAmBH,GAU5C,OATAO,qBAAU,WAOR,OANAN,EAAMZ,QAAQmB,UAAUH,GACxBJ,EAAMZ,QAAQoB,eAAe,GAC7BR,EAAMZ,QAAQqB,SAAQ,GACtBT,EAAMZ,QAAQsB,OACdV,EAAMZ,QAAQuB,mBAAmB,GAAI,IAAK,IAC1C5B,EAAO6B,IAAIT,GACJ,kBAAMpB,EAAO8B,OAAOV,MAC1B,IACI,qCAAiBlB,IAAKe,EAAOJ,KAAM,CAACO,KAoC7CW,IAASC,OAAO,mBAjChB,WAAgB,IAAD,EACWd,oBAAS,GADpB,mBACNS,EADM,KACAM,EADA,KAMb,OACE,oCACE,4BAAQC,UAAU,aAAaC,QALnB,WACdF,GAAQ,KAIN,YAGCN,GACC,kBAAC,IAAD,CAAQ3B,OAAQ,CAAEoC,SAAU,CAAC,EAAG,EAAG,MACjC,kBAAC,WAAD,CAAUC,SAAU,MAClB,uCACA,+BAAWC,YAAU,EAACF,SAAU,CAAC,IAAK,IAAK,MAE1CxC,EAAO2C,KAAI,SAAAvB,GAAG,OACb,0BAAMoB,SAAU,CAAiB,GAAhB1B,KAAK8B,SAAgB,EAAG,EAAmB,GAAhB9B,KAAK8B,SAAgB,IAC/D,uCAAmBC,OAAO,aAC1B,0CAAsBA,OAAO,WAAWC,MAAM,qBAC9C,kBAAC3B,EAAD,CAAOC,IAAKA,SAKlB,kBAACnB,EAAD,CAAU8C,YAAY,EAAMC,YAAU,QAOhC,MAASC,SAASC,eAAe,U","file":"static/js/main.e2c31c9d.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { Suspense, useRef, useEffect, useState } from 'react'\nimport { Canvas, extend, useThree, useFrame, useLoader } from 'react-three-fiber'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport './styles.css'\n\nextend({ OrbitControls })\n\nconst tracks = [\n  '/Audio/12xmonobrowser-001.ogg',\n  '/Audio/12xmonobrowser-002.ogg',\n  '/Audio/12xmonobrowser-003.ogg',\n  '/Audio/12xmonobrowser-004.ogg',\n  '/Audio/12xmonobrowser-005.ogg',\n  '/Audio/12xmonobrowser-006.ogg',\n  '/Audio/12xmonobrowser-007.ogg',\n  '/Audio/12xmonobrowser-008.ogg',\n  '/Audio/12xmonobrowser-009.ogg',\n  '/Audio/12xmonobrowser-010.ogg',\n  '/Audio/12xmonobrowser-011.ogg',\n  '/Audio/12xmonobrowser-012.ogg'\n]\n\nconst Controls = props => {\n  const { camera, gl } = useThree()\n  const ref = useRef()\n  useFrame(() => ref.current.update())\n  return <orbitControls ref={ref} target={[0, 0, 0]} enableDamping maxPolarAngle={Math.PI / 2} minPolarAngle={Math.PI / 3} args={[camera, gl.domElement]} />\n}\n\nfunction Sound({ url }) {\n  const sound = useRef()\n  const { camera } = useThree()\n  const [listener] = useState(() => new THREE.AudioListener())\n  const buffer = useLoader(THREE.AudioLoader, url)\n  useEffect(() => {\n    sound.current.setBuffer(buffer)\n    sound.current.setRefDistance(1)\n    sound.current.setLoop(true)\n    sound.current.play()\n    sound.current.setDirectionalCone(90, 210, 0.3)\n    camera.add(listener)\n    return () => camera.remove(listener)\n  }, [])\n  return <positionalAudio ref={sound} args={[listener]} />\n}\n\nfunction App() {\n  const [play, setPlay] = useState(false)\n\n  const onClick = () => {\n    setPlay(true)\n  }\n  return (\n    <>\n      <button className=\"playButton\" onClick={onClick}>\n        //PLAY//\n      </button>\n      {play && (\n        <Canvas camera={{ position: [0, 0, 0.5] }}>\n          <Suspense fallback={null}>\n            <ambientLight></ambientLight>\n            <spotLight castShadow position={[100, 100, 20]}></spotLight>\n\n            {tracks.map(url => (\n              <mesh position={[Math.random() * 10 - 5, 0, Math.random() * 10 - 5]}>\n                <boxBufferGeometry attach=\"geometry\" />\n                <meshPhysicalMaterial attach=\"material\" color=\"rgb(207, 192, 9)\" />\n                <Sound url={url} />\n              </mesh>\n            ))}\n          </Suspense>\n\n          <Controls enableKeys={true} autoRotate />\n        </Canvas>\n      )}\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}